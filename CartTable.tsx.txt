import { useCartStore } from '@store/useCartStore';
import { formatCurrency } from '@utils/currency';
import { useSettingsStore } from '@store/useSettingsStore';
import { X, AlertTriangle } from 'lucide-react';
import { useEffect, useRef } from 'react';

export default function CartTable() {
  const {
    lines,
    removeLine,
    updateQty,
    updateLineDiscount,
    lineCount,
    subtotal,
    vat,
    grandTotal
  } = useCartStore();
  const settings = useSettingsStore();

  const qtyInputs = useRef<Record<string, HTMLInputElement | null>>({});

  useEffect(() => {
    // focus first qty input when lines change
    const first = lines[0];
    if (first) qtyInputs.current[first.id]?.focus();
  }, [lines.length]);

  return (
    <div>
      <table className="w-full text-sm">
        <thead>
          <tr className="text-left text-gray-500 border-b">
            <th className="py-2">SKU</th>
            <th>Name</th>
            <th className="text-right">Price</th>
            <th className="text-right w-24">Qty</th>
            <th className="text-right w-28">Discount</th>
            <th className="text-right">Total</th>
            <th />
          </tr>
        </thead>
        <tbody>
          {lines.map((l) => (
            <tr key={l.id} className="border-b last:border-0">
              <td className="py-2">{l.sku}</td>
              <td className="py-2">
                <div className="flex items-center gap-2">
                  {l.lowStock && <AlertTriangle className="text-amber-500" size={16} />}
                  {l.name}
                </div>
              </td>
              <td className="py-2 text-right">{formatCurrency(l.unitPrice, settings.currency)}</td>
              <td className="py-2 text-right">
                <input
                  ref={(el) => (qtyInputs.current[l.id] = el)}
                  className="w-20 text-right input"
                  type="number"
                  step="1"
                  min="1"
                  value={l.qty}
                  onChange={(e) => updateQty(l.id, parseFloat(e.target.value || '1'))}
                  onKeyDown={(e) => {
                    if (e.key === 'Escape') (e.target as HTMLInputElement).blur();
                  }}
                  aria-label={`Quantity for ${l.name}`}
                />
              </td>
              <td className="py-2 text-right">
                <input
                  className="w-24 text-right input"
                  placeholder="e.g. 10% or 100"
                  onBlur={(e) => {
                    const v = e.target.value.trim();
                    if (!v) return;
                    if (v.endsWith('%')) {
                      const pct = parseFloat(v.slice(0, -1));
                      if (!isNaN(pct)) updateLineDiscount(l.id, { type: 'PERCENT', value: pct });
                    } else {
                      const amt = parseFloat(v);
                      if (!isNaN(amt)) updateLineDiscount(l.id, { type: 'AMOUNT', value: amt });
                    }
                    e.currentTarget.value = '';
                  }}
                  aria-label={`Discount for ${l.name}`}
                />
              </td>
              <td className="py-2 text-right">
                {formatCurrency(l.lineTotal, settings.currency)}
              </td>
              <td className="py-2 text-right">
                <button className="btn-icon" onClick={() => removeLine(l.id)} aria-label="Remove">
                  <X />
                </button>
              </td>
            </tr>
          ))}
          {lines.length === 0 && (
            <tr>
              <td colSpan={7} className="py-6 text-center text-gray-500">
                Scan a barcode to add items
              </td>
            </tr>
          )}
        </tbody>
      </table>
      <div className="mt-4 grid grid-cols-2 gap-2">
        <div className="text-sm text-gray-500">{lineCount} items</div>
        <div className="text-right text-sm text-gray-500">
          Subtotal {formatCurrency(subtotal, settings.currency)} | VAT{' '}
          {formatCurrency(vat, settings.currency)} | Total{' '}
          {formatCurrency(grandTotal, settings.currency)}
        </div>
      </div>
    </div>
  );
}
